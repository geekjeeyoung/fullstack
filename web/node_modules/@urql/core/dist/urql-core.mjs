function n(a, b) {
  if (Array.isArray(a)) {
    for (var c = 0; c < a.length; c++) {
      n(a[c], b);
    }
  } else if ("object" == typeof a && null !== a) {
    for (c in a) {
      "__typename" === c && "string" == typeof a[c] ? b[a[c]] = 0 : n(a[c], b);
    }
  }
  return b;
}

function p(a) {
  return a.kind === Kind.FIELD && "__typename" === a.name.value && !a.alias;
}

function r(a) {
  if (a.selectionSet && !a.selectionSet.selections.some(p)) {
    return _extends({}, a, {
      selectionSet: _extends({}, a.selectionSet, {
        selections: a.selectionSet.selections.concat([ {
          kind: Kind.FIELD,
          name: {
            kind: Kind.NAME,
            value: "__typename"
          }
        } ])
      })
    });
  }
}

function u(a) {
  a = keyDocument(a);
  var b = t.get(a.__key);
  b || ((b = visit(a, {
    Field: r,
    InlineFragment: r
  })).__key = a.__key, t.set(a.__key, b));
  return b;
}

function v(a) {
  return a && "object" == typeof a ? Object.keys(a).reduce((function(b, c) {
    var d = a[c];
    "__typename" === c ? Object.defineProperty(b, "__typename", {
      enumerable: !1,
      value: d
    }) : Array.isArray(d) ? b[c] = d.map(v) : b[c] = d && "object" == typeof d && "__typename" in d ? v(d) : d;
    return b;
  }), {}) : a;
}

function w(a) {
  a.toPromise = function() {
    return toPromise(take(1)(a));
  };
  return a;
}

function z(a, b, c) {
  c || (c = b.context);
  return {
    key: b.key,
    query: b.query,
    variables: b.variables,
    kind: a,
    context: c,
    get operationName() {
      if ("production" !== process.env.NODE_ENV) {
        var a = y_operationName, b = a.key;
        a = a.message;
        x[b] || (console.warn("[WARNING: Deprecated] " + a), x[b] = !0);
      }
      return this.kind;
    }
  };
}

function A(a, b) {
  return z(a.kind, a, _extends({}, a.context, {
    meta: _extends({}, a.context.meta, b)
  }));
}

function B() {}

function C(a) {
  return "subscription" !== (a = a.kind) && "query" !== a;
}

function D(a) {
  return a.path || a.extensions ? {
    message: a.message,
    path: a.path,
    extensions: a.extensions
  } : a.message;
}

function E(a) {
  return "mutation" !== (a = a.kind) && "query" !== a;
}

function F(a) {
  var b = z(a.kind, a);
  b.query = u(a.query);
  return b;
}

function G(a) {
  return "query" !== a.kind || "cache-only" !== a.context.requestPolicy;
}

function H(a) {
  return A(a, {
    cacheOutcome: "miss"
  });
}

function I(a) {
  return E(a);
}

function J(a) {
  function b(a) {
    var c = a.context.requestPolicy;
    return "query" === a.kind && "network-only" !== c && ("cache-only" === c || f.has(a.key));
  }
  function c(a) {
    var b = f.get(a.key);
    "production" !== process.env.NODE_ENV && q(_extends({}, {
      operation: a
    }, b ? {
      type: "cacheHit",
      message: "The result was successfully retried from the cache"
    } : {
      type: "cacheMiss",
      message: "The result could not be retrieved from the cache"
    }));
    b = _extends({}, b, {
      operation: A(a, {
        cacheOutcome: b ? "hit" : "miss"
      })
    });
    "cache-and-network" === a.context.requestPolicy && (b.stale = !0, K(m, a));
    return b;
  }
  function d(a) {
    return !E(a) && b(a);
  }
  function e(a) {
    function b(a) {
      l.add(a);
    }
    var e, l, h, d = a.operation;
    if (d) {
      e = Object.keys(n(a.data, {})).concat(d.context.additionalTypenames || []);
      if ("mutation" === a.operation.kind) {
        l = new Set;
        "production" !== process.env.NODE_ENV && q({
          type: "cacheInvalidation",
          message: "The following typenames have been invalidated: " + e,
          operation: d,
          data: {
            typenames: e,
            response: a
          },
          source: "cacheExchange"
        });
        for (a = 0; a < e.length; a++) {
          (h = g[h = e[a]] || (g[h] = new Set)).forEach(b);
          h.clear();
        }
        l.forEach((function c(a) {
          f.has(a) && (d = f.get(a).operation, f.delete(a), K(m, d));
        }));
      } else if ("query" === d.kind && a.data) {
        for (f.set(d.key, a), a = 0; a < e.length; a++) {
          (g[h = e[a]] || (g[h] = new Set)).add(d.key);
        }
      }
    }
  }
  function k(a) {
    return !E(a) && !b(a);
  }
  var h = a.forward, m = a.client, q = a.dispatchDebug, f = new Map, g = Object.create(null);
  return function(a) {
    var b = share(a);
    a = map(c)(filter(d)(b));
    b = tap(e)(h(filter(G)(map(H)(merge([ map(F)(filter(k)(b)), filter(I)(b) ])))));
    return merge([ a, b ]);
  };
}

function K(a, b) {
  return a.reexecuteOperation(z(b.kind, b, _extends({}, b.context, {
    requestPolicy: "network-only"
  })));
}

function L(a) {
  return console.log("[Exchange debug]: Completed operation: ", a);
}

function M(a) {
  return console.log("[Exchange debug]: Incoming operation: ", a);
}

function N(a) {
  function b(a) {
    k.delete(a.operation.key);
  }
  function c(a) {
    var b = a.key, c = a.kind;
    if ("teardown" === c) {
      return k.delete(b), !0;
    }
    if ("query" !== c && "subscription" !== c) {
      return !0;
    }
    c = k.has(b);
    k.add(b);
    c && "production" !== process.env.NODE_ENV && e({
      type: "dedup",
      message: "An operation has been deduped.",
      operation: a,
      source: "dedupExchange"
    });
    return !c;
  }
  var d = a.forward, e = a.dispatchDebug, k = new Set;
  return function(a) {
    a = filter(c)(a);
    return tap(b)(d(a));
  };
}

function O(a) {
  return "query" === a.kind || "mutation" === a.kind;
}

function P(a) {
  return "query" !== a.kind && "mutation" !== a.kind;
}

function Q(a) {
  var b = a.forward, c = a.dispatchDebug;
  return function(a) {
    var k, d = share(a);
    a = mergeMap((function(a) {
      var b = a.key, e = filter((function(a) {
        return "teardown" === a.kind && a.key === b;
      }))(d), f = makeFetchBody(a), g = makeFetchURL(a, f), l = makeFetchOptions(a, f);
      "production" !== process.env.NODE_ENV && c({
        type: "fetchRequest",
        message: "A fetch request is being executed.",
        operation: a,
        data: {
          url: g,
          fetchOptions: l
        },
        source: "fetchExchange"
      });
      return onPush((function(b) {
        var d = b.data ? void 0 : b.error;
        "production" !== process.env.NODE_ENV && c({
          type: d ? "fetchError" : "fetchSuccess",
          message: "A " + (d ? "failed" : "successful") + " fetch response has been returned.",
          operation: a,
          data: {
            url: g,
            fetchOptions: l,
            value: d || b
          },
          source: "fetchExchange"
        });
      }))(takeUntil(e)(makeFetchSource(a, g, l)));
    }))(filter(O)(d));
    k = b(filter(P)(d));
    return merge([ a, k ]);
  };
}

function R() {
  return !1;
}

function S(a) {
  function b(a) {
    if ("teardown" !== a.kind && "production" !== process.env.NODE_ENV) {
      var b = 'No exchange has handled operations of kind "' + a.kind + "\". Check whether you've added an exchange responsible for these operations.";
      "production" !== process.env.NODE_ENV && c({
        type: "fallbackCatch",
        message: b,
        operation: a,
        source: "fallbackExchange"
      });
      console.warn(b);
    }
  }
  var c = a.dispatchDebug;
  return function(a) {
    return filter(R)(tap(b)(a));
  };
}

function U(a) {
  return function(b) {
    var c = b.client, d = b.dispatchDebug;
    return a.reduceRight((function(a, b) {
      return b({
        client: c,
        forward: a,
        dispatchDebug: function(a) {
          "production" !== process.env.NODE_ENV && d(_extends({}, {
            timestamp: Date.now(),
            source: b.name
          }, a));
        }
      });
    }), b.forward);
  };
}

function W(a) {
  var d, e, k, h, m, c = this;
  this.activeOperations = Object.create(null);
  this.queue = [];
  this.createOperationContext = function(a) {
    a || (a = {});
    return _extends({}, {
      url: c.url,
      fetchOptions: c.fetchOptions,
      fetch: c.fetch,
      preferGetMethod: c.preferGetMethod
    }, a, {
      suspense: a.suspense || !1 !== a.suspense && c.suspense,
      requestPolicy: a.requestPolicy || c.requestPolicy
    });
  };
  this.createRequestOperation = function(a, b, d) {
    return z(a, b, c.createOperationContext(d));
  };
  this.executeQuery = function(a, b) {
    a = c.createRequestOperation("query", a, b);
    return c.executeRequestOperation(a);
  };
  this.executeSubscription = function(a, b) {
    a = c.createRequestOperation("subscription", a, b);
    return c.executeRequestOperation(a);
  };
  this.executeMutation = function(a, b) {
    a = c.createRequestOperation("mutation", a, b);
    return c.executeRequestOperation(a);
  };
  if ("production" !== process.env.NODE_ENV && !a.url) {
    throw Error("You are creating an urql-client without a url.");
  }
  d = B;
  if ("production" !== process.env.NODE_ENV) {
    e = (d = makeSubject()).next, k = d.source;
    this.subscribeToDebugTarget = function b(a) {
      return subscribe(a)(k);
    };
    d = e;
  }
  this.url = a.url;
  this.fetchOptions = a.fetchOptions;
  this.fetch = a.fetch;
  this.suspense = !!a.suspense;
  this.requestPolicy = a.requestPolicy || "cache-first";
  this.preferGetMethod = !!a.preferGetMethod;
  this.maskTypename = !!a.maskTypename;
  e = makeSubject();
  h = e.next;
  this.operations$ = e.source;
  m = !1;
  this.dispatchOperation = function(a) {
    m = !0;
    for (a && h(a); a = c.queue.shift(); ) {
      h(a);
    }
    m = !1;
  };
  this.reexecuteOperation = function(a) {
    if ("mutation" === a.kind || 0 < (c.activeOperations[a.key] || 0)) {
      c.queue.push(a), m || Promise.resolve().then(c.dispatchOperation);
    }
  };
  a = U(void 0 !== a.exchanges ? a.exchanges : V);
  this.results$ = share(a({
    client: this,
    dispatchDebug: d,
    forward: S({
      dispatchDebug: d
    })
  })(this.operations$));
  publish(this.results$);
}

function X(a) {
  a.data = v(a.data);
  return a;
}

function createClient(a) {
  return new W(a);
}

function debugExchange(a) {
  var d = a.forward;
  return "production" === process.env.NODE_ENV ? function b(a) {
    return d(a);
  } : function c(a) {
    return tap(L)(d(tap(M)(a)));
  };
}

function errorExchange(a) {
  function b(a) {
    var b = a.error;
    a = a.operation;
    b && c(b, a);
  }
  var c = a.onError;
  return function(a) {
    var c = a.forward;
    return function(a) {
      return tap(b)(c(a));
    };
  };
}

function gql() {
  var a, b, c, d, e;
  for (a = arguments, b = Array.isArray(arguments[0]) ? arguments[0][0] : arguments[0] || "", 
  c = 1; c < arguments.length; c++) {
    b += (d = a[c]) && d.kind === Kind.DOCUMENT ? d.loc ? d.loc.source.body : print(d) : d;
    b += a[0][c];
  }
  a = keyDocument(b);
  if ("production" !== process.env.NODE_ENV) {
    for (c = new Set, d = 0; d < a.definitions.length; d++) {
      (e = a.definitions[d]).kind === Kind.FRAGMENT_DEFINITION && (c.has(e = e.name.value) ? console.warn("[WARNING: Duplicate Fragment] A fragment with name `" + e + "` already exists in this document.\nWhile fragment names may not be unique across your source, each name must be unique per document.") : c.add(e));
    }
  }
  a.loc = {
    start: 0,
    end: b.length,
    source: new Source(b, "gql")
  };
  return a;
}

function ssrExchange(a) {
  function b(b) {
    var c = b.client, e = b.forward;
    return function(b) {
      var l = a && "boolean" == typeof a.isClient ? !!a.isClient : !c.suspense, g = share(b);
      b = e(filter(k)(g));
      g = map(h)(filter(m)(g));
      l ? g = tap(d)(g) : b = tap(q)(b);
      return merge([ b, g ]);
    };
  }
  function c(a) {
    return !C(a) && void 0 !== f[a.key];
  }
  function d(a) {
    g.push(a.operation.key);
    1 === g.length && Promise.resolve().then(e);
  }
  function e() {
    for (var a; a = g.shift(); ) {
      delete f[a];
    }
  }
  function k(a) {
    return !c(a);
  }
  function h(a) {
    var b = f[a.key], c = b.error;
    return {
      operation: a,
      data: (b = b.data) ? JSON.parse(b) : void 0,
      extensions: void 0,
      error: c ? new CombinedError({
        networkError: c.networkError ? Error(c.networkError) : void 0,
        graphQLErrors: c.graphQLErrors && c.graphQLErrors.length ? c.graphQLErrors : void 0
      }) : void 0
    };
  }
  function m(a) {
    return c(a);
  }
  function q(a) {
    var c, d, b = a.operation;
    if (!C(b)) {
      c = a.data;
      a = a.error;
      d = {};
      void 0 !== c && (d.data = JSON.stringify(c));
      a && (d.error = {
        graphQLErrors: a.graphQLErrors.map(D)
      }, a.networkError && (d.error.networkError = "" + a.networkError));
      f[b.key] = d;
    }
  }
  var f = {}, g = [];
  b.restoreData = function(a) {
    return _extends(f, a);
  };
  b.extractData = function() {
    return _extends({}, f);
  };
  a && a.initialState && b.restoreData(a.initialState);
  return b;
}

function subscriptionExchange(a) {
  function b(a) {
    return "subscription" === (a = a.kind) || !!d && ("query" === a || "mutation" === a);
  }
  var c = a.forwardSubscription, d = a.enableAllOperations;
  return function(a) {
    function d(a) {
      var b = c({
        key: a.key.toString(36),
        query: print(a.query),
        variables: a.variables,
        context: _extends({}, a.context)
      });
      return make((function(c) {
        function d(b) {
          return f(makeResult(a, b));
        }
        function e(b) {
          return f(makeErrorResult(a, b));
        }
        function g() {
          k || (k = !0, "subscription" === a.kind && m.reexecuteOperation(z("teardown", a, a.context)), 
          h());
        }
        var l, f = c.next, h = c.complete, k = !1;
        Promise.resolve().then((function() {
          k || (l = b.subscribe({
            next: d,
            error: e,
            complete: g
          }));
        }));
        return function() {
          k = !0;
          l && l.unsubscribe();
        };
      }));
    }
    function e(a) {
      return !f(a);
    }
    var m = a.client, q = a.forward, f = b;
    return function(a) {
      var c, b = share(a);
      a = mergeMap((function(a) {
        var c = a.key, e = filter((function(a) {
          return "teardown" === a.kind && a.key === c;
        }))(b);
        return takeUntil(e)(d(a));
      }))(filter(f)(b));
      c = q(filter(e)(b));
      return merge([ a, c ]);
    };
  };
}

var t, x, y_operationName, T, V;

import { toPromise, take, share, filter, map, tap, merge, mergeMap, takeUntil, make, onPush, makeSubject, publish, onStart, onEnd, switchMap, fromValue, interval, subscribe } from "wonka";

import { k as keyDocument, _ as _extends, C as CombinedError, m as makeResult, a as makeErrorResult, b as makeFetchBody, c as makeFetchURL, d as makeFetchOptions, e as makeFetchSource, f as createRequest } from "./a935f192.mjs";

import { visit } from "graphql/language/visitor.mjs";

import { Kind } from "graphql/language/kinds.mjs";

import { print } from "graphql/language/printer.mjs";

import { Source } from "graphql/language/source.mjs";

export { C as CombinedError, f as createRequest, g as getOperationName, a as makeErrorResult, m as makeResult, s as stringifyVariables } from "./a935f192.mjs";

t = new Map;

x = {}, y_operationName = {
  key: "Operation.operationName",
  message: 'The "Operation.operationName" property has been deprecated and will be removed in a future release of urql. Use "Operation.kind" instead.'
};

T = S({
  dispatchDebug: B
});

V = [ N, J, Q ];

W.prototype.onOperationStart = function(a) {
  var b = a.key;
  this.activeOperations[b] = (this.activeOperations[b] || 0) + 1;
  this.dispatchOperation(a);
};

W.prototype.onOperationEnd = function(a) {
  var b = a.key, c = this.activeOperations[b] || 0;
  if (0 >= (this.activeOperations[b] = 0 >= c ? 0 : c - 1)) {
    for (b = this.queue.length - 1; 0 <= b; b--) {
      this.queue[b].key === a.key && this.queue.splice(b, 1);
    }
    this.dispatchOperation(z("teardown", a, a.context));
  }
};

W.prototype.executeRequestOperation = function(a) {
  var k, h, d = this, e = filter((function(b) {
    return b.operation.key === a.key;
  }))(this.results$);
  this.maskTypename && (e = map(X)(e));
  if ("mutation" === a.kind) {
    return take(1)(onStart((function b() {
      return d.dispatchOperation(a);
    }))(e));
  }
  k = filter((function(b) {
    return "teardown" === b.kind && b.key === a.key;
  }))(this.operations$), h = onEnd((function() {
    d.onOperationEnd(a);
  }))(onStart((function() {
    d.onOperationStart(a);
  }))(takeUntil(k)(e)));
  return "query" === a.kind && a.context.pollInterval ? switchMap((function c() {
    return h;
  }))(merge([ fromValue(0), interval(a.context.pollInterval) ])) : h;
};

W.prototype.query = function(a, b, c) {
  c && "boolean" == typeof c.suspense || (c = _extends({}, c, {
    suspense: !1
  }));
  return w(this.executeQuery(createRequest(a, b), c));
};

W.prototype.readQuery = function(a, b, c) {
  var d = null;
  subscribe((function(a) {
    d = a;
  }))(this.executeQuery(createRequest(a, b), c)).unsubscribe();
  return d;
};

W.prototype.subscription = function(a, b, c) {
  return this.executeSubscription(createRequest(a, b), c);
};

W.prototype.mutation = function(a, b, c) {
  return w(this.executeMutation(createRequest(a, b), c));
};

export { W as Client, J as cacheExchange, U as composeExchanges, createClient, debugExchange, N as dedupExchange, V as defaultExchanges, errorExchange, T as fallbackExchangeIO, Q as fetchExchange, u as formatDocument, gql, z as makeOperation, v as maskTypename, ssrExchange, subscriptionExchange };
//# sourceMappingURL=urql-core.mjs.map
