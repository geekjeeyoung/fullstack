"use strict";

function _extends() {
  return (_extends = Object.assign || function(a) {
    var b, c, d;
    for (b = 1; b < arguments.length; b++) {
      c = arguments[b];
      for (d in c) {
        Object.prototype.hasOwnProperty.call(c, d) && (a[d] = c[d]);
      }
    }
    return a;
  }).apply(this, arguments);
}

function _toString() {
  return this.message;
}

var wonka = require("wonka"), graphql = require("graphql"), generateErrorMessage = function(a, b) {
  var d = "";
  if (void 0 !== a) {
    return d = "[Network] " + a.message;
  }
  void 0 !== b && b.forEach((function c(a) {
    d += "[GraphQL] " + a.message + "\n";
  }));
  return d.trim();
}, rehydrateGraphQlError = function(a) {
  return "string" == typeof a ? new graphql.GraphQLError(a) : "object" == typeof a && a.message ? new graphql.GraphQLError(a.message, a.nodes, a.source, a.positions, a.path, a, a.extensions || {}) : a;
}, CombinedError = function(a) {
  function b(c) {
    var f, b = c.networkError, e = c.response;
    c = (c.graphQLErrors || []).map(rehydrateGraphQlError);
    f = generateErrorMessage(b, c);
    a.call(this, f);
    this.name = "CombinedError";
    this.message = f;
    this.graphQLErrors = c;
    this.networkError = b;
    this.response = e;
  }
  a && (b.__proto__ = a);
  (b.prototype = Object.create(a && a.prototype)).constructor = b;
  b.prototype.toString = _toString;
  return b;
}(Error), phash = function(a, b) {
  a |= 0;
  for (var c = 0, d = 0 | b.length; c < d; c++) {
    a = (a << 5) + a + b.charCodeAt(c);
  }
  return a;
}, hash = function(a) {
  return phash(5381, a) >>> 0;
}, seen = new Set, cache = new WeakMap, stringify = function(a) {
  var b, c, d, e, f, g;
  if (null === a || seen.has(a)) {
    return "null";
  }
  if ("object" != typeof a) {
    return JSON.stringify(a) || "";
  }
  if (a.toJSON) {
    return stringify(a.toJSON());
  }
  if (Array.isArray(a)) {
    for (b = "[", c = 0, d = a.length; c < d; c++) {
      0 < c && (b += ",");
      b += 0 < (e = stringify(a[c])).length ? e : "null";
    }
    return b + "]";
  }
  if (!(b = Object.keys(a).sort()).length && a.constructor && a.constructor !== Object) {
    return b = cache.get(a) || Math.random().toString(36).slice(2), cache.set(a, b), 
    '{"__key":"' + b + '"}';
  }
  seen.add(a);
  c = "{";
  d = 0;
  for (e = b.length; d < e; d++) {
    (g = stringify(a[f = b[d]])) && (1 < c.length && (c += ","), c += stringify(f) + ":" + g);
  }
  seen.delete(a);
  return c + "}";
}, stringifyVariables = function(a) {
  seen.clear();
  return stringify(a);
}, hashQuery = function(a) {
  return hash(a.replace(/([\s,]|#[^\n\r]+)+/g, " ").trim());
}, docs = Object.create(null), createRequest = function(a, b) {
  if ("string" == typeof a) {
    var c = hashQuery(a);
    a = void 0 !== docs[c] ? docs[c] : graphql.parse(a, {
      noLocation: !0
    });
  } else {
    void 0 !== a.__key ? c = a.__key : (c = hashQuery(graphql.print(a)), a = void 0 !== docs[c] ? docs[c] : a);
  }
  docs[c] = a;
  a.__key = c;
  return {
    key: b ? phash(c, stringifyVariables(b)) >>> 0 : c,
    query: a,
    variables: b || {}
  };
}, getOperationName = function(a) {
  var b, c, d;
  for (b = 0, c = a.definitions.length; b < c; b++) {
    if ((d = a.definitions[b]).kind === graphql.Kind.OPERATION_DEFINITION && d.name) {
      return d.name.value;
    }
  }
}, makeResult = function(a, b, c) {
  return {
    operation: a,
    data: b.data,
    error: Array.isArray(b.errors) ? new CombinedError({
      graphQLErrors: b.errors,
      response: c
    }) : void 0,
    extensions: "object" == typeof b.extensions && b.extensions || void 0
  };
}, makeErrorResult = function(a, b, c) {
  return {
    operation: a,
    data: void 0,
    error: new CombinedError({
      networkError: b,
      response: c
    }),
    extensions: void 0
  };
}, shouldUseGet = function(a) {
  return "query" === a.kind && !!a.context.preferGetMethod;
}, makeFetchBody = function(a) {
  return {
    query: graphql.print(a.query),
    operationName: getOperationName(a.query),
    variables: a.variables || void 0,
    extensions: void 0
  };
}, makeFetchURL = function(a, b) {
  var c = shouldUseGet(a);
  a = a.context.url;
  if (!c || !b) {
    return a;
  }
  c = [];
  b.operationName && c.push("operationName=" + encodeURIComponent(b.operationName));
  b.query && c.push("query=" + encodeURIComponent(b.query.replace(/([\s,]|#[^\n\r]+)+/g, " ").trim()));
  b.variables && c.push("variables=" + encodeURIComponent(stringifyVariables(b.variables)));
  b.extensions && c.push("extensions=" + encodeURIComponent(stringifyVariables(b.extensions)));
  return a + "?" + c.join("&");
}, makeFetchOptions = function(a, b) {
  var c = shouldUseGet(a);
  return _extends({}, a = "function" == typeof a.context.fetchOptions ? a.context.fetchOptions() : a.context.fetchOptions || {}, {
    body: !c && b ? JSON.stringify(b) : void 0,
    method: c ? "GET" : "POST",
    headers: c ? a.headers : _extends({}, {
      "content-type": "application/json"
    }, a.headers)
  });
}, executeFetch = function(a, b, c) {
  var e, d = !1;
  return (a.context.fetch || fetch)(b, c).then((function(a) {
    e = a;
    d = 200 > a.status || a.status >= ("manual" === c.redirect ? 400 : 300);
    return a.json();
  })).then((function(b) {
    if (!("data" in b) && !("errors" in b)) {
      throw Error("No Content");
    }
    return makeResult(a, b, e);
  })).catch((function(b) {
    if ("AbortError" !== b.name) {
      return makeErrorResult(a, d ? Error(e.statusText) : b, e);
    }
  }));
}, makeFetchSource = function(a, b, c) {
  return wonka.make((function(d) {
    var e = d.next, f = d.complete, g = "undefined" != typeof AbortController ? new AbortController : null, h = !1;
    Promise.resolve().then((function() {
      if (!h) {
        return g && (c.signal = g.signal), executeFetch(a, b, c);
      }
    })).then((function(a) {
      h || (h = !0, a && e(a), f());
    }));
    return function() {
      h = !0;
      g && g.abort();
    };
  }));
};

exports.CombinedError = CombinedError;

exports._extends = _extends;

exports.createRequest = createRequest;

exports.getOperationName = getOperationName;

exports.makeErrorResult = makeErrorResult;

exports.makeFetchBody = makeFetchBody;

exports.makeFetchOptions = makeFetchOptions;

exports.makeFetchSource = makeFetchSource;

exports.makeFetchURL = makeFetchURL;

exports.makeResult = makeResult;

exports.stringifyVariables = stringifyVariables;
//# sourceMappingURL=aa6c4fd3.js.map
