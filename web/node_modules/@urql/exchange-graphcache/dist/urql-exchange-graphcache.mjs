function n(a) {
  return a.name.value;
}

function w(a) {
  return a.selectionSet ? a.selectionSet.selections : [];
}

function aa(a, b) {
  var e, f, g, h, c = {}, d = 0;
  if (a.arguments && a.arguments.length) {
    for (e = 0, f = a.arguments.length; e < f; e++) {
      null != (h = valueFromASTUntyped((g = a.arguments[e]).value, b)) && (c[n(g)] = h, 
      d++);
    }
  }
  return 0 < d ? c : null;
}

function ba(a, b) {
  var d, e, f, g, h, c = {};
  if (!b) {
    return c;
  }
  if (a.variableDefinitions) {
    for (d = 0, e = a.variableDefinitions.length; d < e; d++) {
      c[g = n((f = a.variableDefinitions[d]).variable)] = void 0 === b[g] && f.defaultValue ? valueFromASTUntyped(f.defaultValue, b) : b[g];
    }
  }
  for (h in b) {
    h in c || (c[h] = b[h]);
  }
  return c;
}

function z(a, b) {
  var c = "";
  b.kind === Kind.INLINE_FRAGMENT ? c = a ? 'Inline Fragment on "' + a + '"' : "Inline Fragment" : b.kind === Kind.OPERATION_DEFINITION ? c = (b.name ? '"' + b.name.value + '"' : "Unnamed") + " " + b.operation : b.kind === Kind.FRAGMENT_DEFINITION && (c = '"' + b.name.value + '" Fragment');
  c && x.push(c);
}

function da() {
  return x.length ? "\n(Caused At: " + x.join(", ") + ")" : "";
}

function A(a, b, c) {
  if (!a) {
    throw a = b || "Minfied Error #" + c + "\n", "production" !== process.env.NODE_ENV && (a += da()), 
    (c = Error(a + "\nhttps://bit.ly/2XbVrpR#" + c)).name = "Graphcache Error", c;
  }
}

function B(a, b) {
  ca.has(a) || (console.warn(a + da() + "\nhttps://bit.ly/2XbVrpR#" + b), ca.add(a));
}

function C(a) {
  for (var b = 0; b < a.definitions.length; b++) {
    if (a.definitions[b].kind === Kind.OPERATION_DEFINITION) {
      return a.definitions[b];
    }
  }
  A(!1, "production" !== process.env.NODE_ENV ? "Invalid GraphQL document: All GraphQL documents must contain an OperationDefinitionnode for a query, subscription, or mutation." : "", 1);
}

function D(a) {
  var b, c, d;
  for (b = {}, c = 0; c < a.definitions.length; c++) {
    (d = a.definitions[c]).kind === Kind.FRAGMENT_DEFINITION && (b[n(d)] = d);
  }
  return b;
}

function ea(a, b) {
  var d, e, f, c = a.directives;
  if (!c) {
    return !0;
  }
  for (d = 0, e = c.length; d < e; d++) {
    if (("include" === (a = n(f = c[d])) || "skip" === a) && f.arguments && f.arguments[0] && "if" === n(f.arguments[0])) {
      return b = valueFromASTUntyped(f.arguments[0].value, b), "include" === a ? !!b : !b;
    }
  }
  return !0;
}

function fa(a) {
  for (var b = {}, c = 0; c < a.length; c++) {
    b[a[c].name] = a[c];
  }
  return b;
}

function na(a, b, c) {
  if (ia.test(c)) {
    return !0;
  }
  return !!(a = oa(a, b, c)) && "NON_NULL" !== a.type.kind;
}

function pa(a, b, c) {
  if (!(a = oa(a, b, c))) {
    return !1;
  }
  return "LIST" === (a = "NON_NULL" === a.type.kind ? a.type.ofType : a.type).kind && "NON_NULL" !== a.ofType.kind;
}

function oa(a, b, c) {
  qa(a, b);
  a = a.types[b].fields[c];
  "production" !== process.env.NODE_ENV && (a || B("Invalid field: The field `" + c + "` does not exist on `" + b + "`, but the GraphQL document expects it to exist.\nTraversal will continue, however this may lead to undefined behavior!", 4));
  return a;
}

function qa(a, b) {
  A(a.types[b] && "OBJECT" === a.types[b].kind, "production" !== process.env.NODE_ENV ? "Invalid Object type: The type `" + b + "` is not an object in the defined schema, but the GraphQL document is traversing it." : "", 3);
}

function ra(a) {
  "production" !== process.env.NODE_ENV && B("Invalid resolver: `" + a + "` is not in the defined schema, but the `resolvers` option is referencing it.", 23);
}

function G(a, b) {
  return b ? a + "(" + stringifyVariables(b) + ")" : a;
}

function sa(a) {
  var b = a.indexOf("(");
  return -1 < b ? {
    fieldKey: a,
    fieldName: a.slice(0, b),
    arguments: JSON.parse(a.slice(b + 1, -1))
  } : {
    fieldKey: a,
    fieldName: a,
    arguments: null
  };
}

function ta(a, b) {
  return a.replace(/\./g, "%2e") + "." + b;
}

function ua(a) {
  var b = a.indexOf(".");
  return {
    entityKey: a.slice(0, b).replace(/%2e/g, "."),
    fieldKey: a = a.slice(b + 1)
  };
}

function J() {
  return Object.create(null);
}

function P(a, b, c, d) {
  K = a;
  L = b;
  M = J();
  O = !!d;
  "production" !== process.env.NODE_ENV && (x.length = 0);
  c ? d || 0 < b.optimisticOrder.length ? (d || b.commutativeKeys.has(c) ? d && b.commutativeKeys.delete(c) : va(b, c), 
  N = c, -1 === b.optimisticOrder.indexOf(c) && b.optimisticOrder.unshift(c), b.refLock[c] || (b.refLock[c] = J(), 
  b.links.optimistic[c] = new Map, b.records.optimistic[c] = new Map)) : (N = null, 
  ya(b, c)) : N = null;
}

function Q() {
  "production" !== process.env.NODE_ENV && Ba();
  var b = L, c = N;
  O = !1;
  N = null;
  if (c && -1 < b.optimisticOrder.indexOf(c)) {
    for (c = b.optimisticOrder.length; 0 <= --c && b.refLock[b.optimisticOrder[c]] && b.commutativeKeys.has(b.optimisticOrder[c]); ) {
      Ca(b.optimisticOrder[c]);
    }
  }
  M = L = K = null;
  "production" !== process.env.NODE_ENV && (x.length = 0);
  "test" === process.env.NODE_ENV || b.defer || (b.defer = !0, Promise.resolve().then((function a() {
    P("read", b, null);
    L.gc.forEach(za);
    !function Aa() {
      function a(a) {
        var f, c = ua(a), e = c.entityKey;
        void 0 !== (f = U(e, c = c.fieldKey)) ? b[a] = ":" + stringifyVariables(f) : void 0 !== (f = T(e, c)) ? b[a] = stringifyVariables(f) : b[a] = void 0;
      }
      if (L.storage) {
        O = !0;
        K = "read";
        var b = J();
        L.persist.forEach(a);
        O = !1;
        L.storage.writeData(b);
        L.persist.clear();
      }
    }();
    Q();
    b.defer = !1;
  })));
}

function Ba() {
  A(null !== M, "production" !== process.env.NODE_ENV ? "Invalid Cache call: The cache may only be accessed or mutated duringoperations like write or query, or as part of its resolvers, updaters, or optimistic configs." : "", 2);
  return M;
}

function Da(a, b, c, d) {
  var e = (a = N ? a.optimistic[N] : a.base).get(b);
  void 0 === e && a.set(b, e = J());
  void 0 !== d || N ? e[c] = d : delete e[c];
}

function Ea(a, b, c) {
  var d, e, f, g, h;
  for (e = 0, f = L.optimisticOrder.length; e < f; e++) {
    if ((h = a.optimistic[g = L.optimisticOrder[e]]) && (!O || "write" === K || L.commutativeKeys.has(g)) && void 0 !== (d = h.get(b)) && c in d) {
      return d[c];
    }
  }
  return void 0 !== (d = a.base.get(b)) ? d[c] : void 0;
}

function Fa(a, b, c, d) {
  var e = void 0 !== b[c] ? b[c] : 0;
  b = b[c] = e + d | 0;
  void 0 !== a && (0 >= b ? a.add(c) : 0 >= e && 0 < b && a.delete(c));
}

function Ga(a, b, c, d) {
  var e, f, g;
  if ("string" == typeof c) {
    Fa(a, b, c, d);
  } else if (Array.isArray(c)) {
    for (e = 0, f = c.length; e < f; e++) {
      (g = c[e]) && Fa(a, b, g, d);
    }
  }
}

function Ha(a, b, c) {
  if (void 0 !== c) {
    for (var d in c) {
      b.has(d) || (a.push(sa(d)), b.add(d));
    }
  }
}

function Ia(a, b, c, d) {
  var e, f, g;
  Ha(a, b, d.base.get(c));
  for (e = 0, f = L.optimisticOrder.length; e < f; e++) {
    void 0 !== (g = d.optimistic[L.optimisticOrder[e]]) && Ha(a, b, g.get(c));
  }
}

function za(a, b, c) {
  var d, e;
  if (0 < (L.refCount[a] || 0)) {
    c.delete(a);
  } else {
    for (d in L.refLock) {
      if (0 < ((b = L.refLock[d])[a] || 0)) {
        return;
      }
      delete b[a];
    }
    delete L.refCount[a];
    c.delete(a);
    L.records.base.delete(a);
    if (d = L.links.base.get(a)) {
      L.links.base.delete(a);
      for (e in d) {
        Ga(c, L.refCount, d[e], -1);
      }
    }
  }
}

function R(a, b) {
  "__typename" !== b && (a !== L.queryRootKey ? M[a] = !0 : void 0 !== b && (M[a + "." + b] = !0));
}

function T(a, b) {
  R(a, b);
  return Ea(L.records, a, b);
}

function U(a, b) {
  R(a, b);
  return Ea(L.links, a, b);
}

function V(a, b, c) {
  R(a, b);
  !O && L.storage && L.persist.add(ta(a, b));
  Da(L.records, a, b, c);
}

function Ja(a, b, c) {
  var e, f, g, d = L;
  if (N) {
    e = d.refLock[N] || (d.refLock[N] = J());
    f = d.links.optimistic[N];
  } else {
    e = d.refCount;
    f = d.links.base;
    g = d.gc;
  }
  f = (f = f && f.get(a)) && f[b];
  R(a, b);
  !O && L.storage && L.persist.add(ta(a, b));
  Da(d.links, a, b, c);
  Ga(g, e, f, -1);
  Ga(g, e, c, 1);
}

function va(a, b) {
  var c = a.optimisticOrder.indexOf(b);
  -1 === c ? a.optimisticOrder.unshift(b) : a.commutativeKeys.has(b) || (Ka(a, b), 
  a.optimisticOrder.splice(c, 1), a.optimisticOrder.unshift(b));
  a.commutativeKeys.add(b);
}

function Ka(a, b) {
  a.refLock[b] && (delete a.refLock[b], delete a.records.optimistic[b], delete a.links.optimistic[b]);
}

function ya(a, b) {
  var c = a.optimisticOrder.indexOf(b);
  -1 < c && (a.optimisticOrder.splice(c, 1), a.commutativeKeys.delete(b));
  Ka(a, b);
}

function La(a, b) {
  for (var c in a) {
    Ja(b, c, a[c]);
  }
}

function Ma(a, b) {
  for (var c in a) {
    V(b, c, a[c]);
  }
}

function Ca(a) {
  var c, b = M;
  M = J();
  (c = L.links.optimistic[a]) && c.forEach(La);
  (c = L.records.optimistic[a]) && c.forEach(Ma);
  M = b;
  ya(L, a);
}

function Na(a) {
  var b = L.links, c = L.records, d = [], e = new Set;
  R(a);
  Ia(d, e, a, b);
  Ia(d, e, a, c);
  return d;
}

function W(a, b, c, d, e, f) {
  return {
    store: a,
    variables: b,
    fragments: c,
    parentTypeName: d,
    parentKey: e,
    parentFieldKey: "",
    fieldName: "",
    partial: !1,
    optimistic: !!f
  };
}

function Oa(a, b, c, d) {
  if (!b) {
    return !1;
  }
  var e = a.typeCondition ? n(a.typeCondition) : null;
  if (!e || b === e) {
    return !0;
  }
  "production" !== process.env.NODE_ENV && B("Heuristic Fragment Matching: A fragment is trying to match against the `" + b + "` type, but the type condition is `" + e + "`. Since GraphQL allows for interfaces `" + e + "` may be aninterface.\nA schema needs to be defined for this match to be deterministic, otherwise the fragment will be matched heuristically!", 16);
  return !w(a).some((function(a) {
    if (a.kind !== Kind.FIELD) {
      return !1;
    }
    a = G(n(a), aa(a, d));
    return !(void 0 !== T(c, a) || void 0 !== U(c, a));
  }));
}

function Pa(a, b, c, d) {
  var e, f = 0;
  return function() {
    var g, h, l, k;
    if (void 0 !== e) {
      if (void 0 !== (g = e())) {
        return g;
      }
      e = void 0;
      "production" !== process.env.NODE_ENV && x.pop();
    }
    for (;f < c.length; ) {
      if (ea(g = c[f++], d.variables)) {
        if (g.kind === Kind.FIELD) {
          return g;
        }
        if (void 0 !== (g = g.kind === Kind.INLINE_FRAGMENT ? g : d.fragments[n(g)])) {
          if (d.store.schema) {
            h = d.store.schema;
            if (l = a) {
              (k = g.typeCondition ? n(g.typeCondition) : null) && l !== k ? h.types[k] && "OBJECT" === h.types[k].kind ? h = k === l : (A(h.types[k] && ("INTERFACE" === h.types[k].kind || "UNION" === h.types[k].kind), "production" !== process.env.NODE_ENV ? "Invalid Abstract type: The type `" + k + "` is not an Interface or Union type in the defined schema, but a fragment in the GraphQL document is using it as a type condition." : "", 5), 
              qa(h, l), h = h.isSubType(k, l)) : h = !0;
            } else {
              h = !1;
            }
          } else {
            h = Oa(g, a, b, d.variables);
          }
          if (h) {
            return "production" !== process.env.NODE_ENV && z(a, g), (e = Pa(a, b, w(g), d))();
          }
        }
      }
    }
  };
}

function Qa(a) {
  return void 0 === a ? null : a;
}

function Ra(a, b, c, d) {
  P("write", a.data, d || null);
  a = Sa(a, b, c);
  Q();
  return a;
}

function Sa(a, b, c) {
  var d = C(b.query), e = {
    data: c,
    dependencies: Ba()
  }, f = a.rootFields[d.operation];
  a = W(a, ba(d, b.variables), D(b.query), f, f);
  "production" !== process.env.NODE_ENV && z(f, d);
  Ta(a, f, w(d), c);
  "production" !== process.env.NODE_ENV && x.pop();
  return e;
}

function Ta(a, b, c, d) {
  var h, l, k, p, m, q, u, v, H, e = b === a.store.rootFields.query, f = !e && !!a.store.rootNames[b], g = f || e ? b : d.__typename;
  if (g) {
    f || e || !b || V(b, "__typename", g);
    c = Pa(g, b || g, c, a);
    for (;h = c(); ) {
      k = G(e = n(h), l = aa(h, a.variables)), m = d[p = h.alias ? h.alias.value : n(h)];
      if ("production" !== process.env.NODE_ENV) {
        if (f || void 0 !== m) {
          if (a.store.schema && g && "__typename" !== e) {
            q = a.store.schema, u = g;
            ia.test(v = e) || oa(q, u, v);
          }
        } else {
          e = a.optimistic ? "\nYour optimistic result may be missing a field!" : "";
          l = void 0 === h.selectionSet ? "scalar (number, boolean, etc)" : "selection set";
          "production" !== process.env.NODE_ENV && B("Invalid undefined: The field at `" + k + "` is `undefined`, but the GraphQL query expects a " + l + " for this field." + e, 13);
          continue;
        }
      }
      if ("__typename" !== e) {
        if (a.optimistic && f) {
          if (!(m = a.store.optimisticMutations[e])) {
            continue;
          }
          u = g;
          v = k;
          H = e;
          (q = a).parentTypeName = g;
          q.parentKey = u;
          q.parentFieldKey = v;
          q.fieldName = H;
          m = d[p] = Qa(m(l || {}, a.store, a));
        }
        h.selectionSet ? b && !f ? (p = b + "." + k, Ja(b || g, k, h = Ua(a, w(h), Qa(m), p))) : Ua(a, w(h), Qa(m)) : b && !f && V(b || g, k, m);
        f && (p = g, k = g + "." + k, q = e, (h = a).parentTypeName = g, h.parentKey = p, 
        h.parentFieldKey = k, h.fieldName = q, k = a.store.updates[g][e]) && (d[e] = m, 
        k(d, l || {}, a.store, a));
      }
    }
  } else {
    "production" !== process.env.NODE_ENV && B("Couldn't find __typename when writing.\nIf you're writing to the cache manually have to pass a `__typename` property on each entity in your data.", 14);
  }
}

function Ua(a, b, c, d) {
  var e, f, g, h;
  if (Array.isArray(c)) {
    for (e = Array(c.length), f = 0, g = c.length; f < g; f++) {
      h = Ua(a, b, c[f], d ? d + "." + f : void 0);
      e[f] = h;
    }
    return e;
  }
  if (null === c) {
    return null;
  }
  e = a.store.keyOfEntity(c);
  f = c.__typename;
  "production" !== process.env.NODE_ENV && d && void 0 === a.store.keys[c.__typename] && null === e && "string" == typeof f && !Va.test(f) && B("Invalid key: The GraphQL query at the field at `" + d + "` has a selection set, but no key could be generated for the data at this field.\nYou have to request `id` or `_id` fields for all selection sets or create a custom `keys` config for `" + f + "`.\nEntities without keys will be embedded directly on the parent entity. If this is intentional, create a `keys` config for `" + f + "` that always returns null.", 15);
  Ta(a, d = e || d, b, c);
  return d || null;
}

function X(a) {
  var b, c, d, e, f, g, h, l, k, p, m, q, u;
  this.keyOfField = G;
  a || (a = {});
  this.resolvers = a.resolvers || {};
  this.optimisticMutations = a.optimistic || {};
  this.keys = a.keys || {};
  d = "Query", e = "Mutation", f = "Subscription";
  if (a.schema) {
    g = this.schema = function ha(a) {
      function b(a) {
        switch (a.kind) {
         case "OBJECT":
         case "INTERFACE":
          return {
            name: a.name,
            kind: a.kind,
            interfaces: e(a.interfaces || []),
            fields: e(a.fields.map(c))
          };

         case "UNION":
          return {
            name: a.name,
            kind: a.kind,
            types: e(a.possibleTypes || [])
          };
        }
      }
      function c(a) {
        return {
          name: a.name,
          type: a.type,
          args: e(a.args)
        };
      }
      var d, e, f, g, h;
      a = a.__schema;
      for (d = {}, e = fa, f = 0; f < a.types.length; f++) {
        if ((g = a.types[f]) && g.name) {
          (h = b(g)) && (d[g.name] = h);
        }
      }
      return {
        query: a.queryType ? a.queryType.name : null,
        mutation: a.mutationType ? a.mutationType.name : null,
        subscription: a.subscriptionType ? a.subscriptionType.name : null,
        types: d,
        isSubType: function(a, b) {
          var c = d[a], e = d[b];
          return c && e ? "UNION" === c.kind ? !!c.types[b] : "OBJECT" !== c.kind && "OBJECT" === e.kind ? !!e.interfaces[a] : a === b : !1;
        }
      };
    }(a.schema);
    d = g.query || d;
    e = g.mutation || e;
    f = g.subscription || f;
  }
  this.updates = ((b = {})[e] = a.updates && a.updates.Mutation || {}, b[f] = a.updates && a.updates.Subscription || {}, 
  b);
  this.rootFields = {
    query: d,
    mutation: e,
    subscription: f
  };
  this.rootNames = ((c = {})[d] = "query", c[e] = "mutation", c[f] = "subscription", 
  c);
  a = d;
  this.data = {
    defer: !1,
    gc: new Set,
    persist: new Set,
    queryRootKey: a,
    refCount: J(),
    refLock: J(),
    links: {
      optimistic: J(),
      base: new Map
    },
    records: {
      optimistic: J(),
      base: new Map
    },
    commutativeKeys: new Set,
    optimisticOrder: [],
    storage: null
  };
  if (this.schema && "production" !== process.env.NODE_ENV) {
    a = this.schema;
    b = this.keys;
    if ("production" !== process.env.NODE_ENV) {
      for (h in b) {
        "production" !== process.env.NODE_ENV && (a.types[h] || B("Invalid Object type: The type `" + h + "` is not an object in the defined schema, but the `keys` option is referencing it.", 20));
      }
    }
    h = this.schema;
    a = this.updates;
    if ("production" !== process.env.NODE_ENV) {
      if (h.mutation) {
        b = h.types[h.mutation].fields;
        c = a[h.mutation] || {};
        for (l in c) {
          "production" !== process.env.NODE_ENV && void 0 === b[l] && B("Invalid mutation field: `" + l + "` is not in the defined schema, but the `updates.Mutation` option is referencing it.", 21);
        }
      }
      if (h.subscription) {
        l = h.types[h.subscription].fields;
        h = a[h.subscription] || {};
        for (k in h) {
          "production" !== process.env.NODE_ENV && void 0 === l[k] && B("Invalid subscription field: `" + k + "` is not in the defined schema, but the `updates.Subscription` option is referencing it.", 22);
        }
      }
    }
    k = this.schema;
    l = this.resolvers;
    if ("production" !== process.env.NODE_ENV) {
      for (p in l) {
        if ("Query" === p) {
          if (k.query) {
            h = k.types[k.query].fields;
            for (m in l.Query) {
              h[m] || ra("Query." + m);
            }
          } else {
            ra("Query");
          }
        } else if (k.types[p]) {
          h = k.types[p].fields;
          for (q in l[p]) {
            h[q] || ra(p + "." + q);
          }
        } else {
          ra(p);
        }
      }
    }
    m = this.schema;
    p = this.optimisticMutations;
    if ("production" !== process.env.NODE_ENV && m.mutation) {
      m = m.types[m.mutation].fields;
      for (u in p) {
        "production" !== process.env.NODE_ENV && (m[u] || B("Invalid optimistic mutation field: `" + u + "` is not a mutation field in the defined schema, but the `optimistic` option is referencing it.", 24));
      }
    }
  }
}

function Xa(a, b, c) {
  P("read", a.data, null);
  a = Wa(a, b, c);
  Q();
  return a;
}

function Wa(a, b, c) {
  var d = C(b.query), e = a.rootFields[d.operation], f = w(d);
  a = W(a, ba(d, b.variables), D(b.query), e, e);
  "production" !== process.env.NODE_ENV && z(e, d);
  c = c || {};
  c = e !== a.store.rootFields.query ? Ya(a, e, f, c) : Y(a, e, f, c);
  "production" !== process.env.NODE_ENV && x.pop();
  return {
    dependencies: Ba(),
    partial: void 0 === c ? !1 : a.partial,
    data: void 0 === c ? null : c
  };
}

function Ya(a, b, c, d) {
  var e, f, g;
  if ("string" != typeof d.__typename) {
    return d;
  }
  b = Pa(b, b, c, a);
  (c = {}).__typename = d.__typename;
  for (;void 0 !== (e = b()); ) {
    g = d[f = e.alias ? e.alias.value : n(e)];
    void 0 !== e.selectionSet && null !== g ? (g = Qa(g), c[f] = Za(a, w(e), g)) : c[f] = g;
  }
  return c;
}

function Za(a, b, c) {
  if (Array.isArray(c)) {
    for (var d = Array(c.length), e = 0, f = c.length; e < f; e++) {
      d[e] = Za(a, b, c[e]);
    }
    return d;
  }
  if (null === c) {
    return null;
  }
  return null !== (d = a.store.keyOfEntity(c)) ? void 0 === (a = Y(a, d, b, {})) ? null : a : Ya(a, c.__typename, b, c);
}

function Y(a, b, c, d, e) {
  var l, k, p, m, q, u, v, H, t, E, F, r, y, I, f = a.store, g = b === f.rootFields.query, h = e && f.keyOfEntity(e) || b;
  "production" !== process.env.NODE_ENV && !g && a.store.rootNames[h] && B("Invalid root traversal: A selection was being read on `" + h + "` which is an uncached root type.\nThe `" + a.store.rootFields.mutation + "` and `" + a.store.rootFields.subscription + "` types are special Operation Root Types and cannot be read back from the cache.", 25);
  if ("string" == typeof (b = g ? b : T(h, "__typename") || e && e.__typename)) {
    if (e && b !== e.__typename) {
      "production" !== process.env.NODE_ENV && B("Invalid resolver data: The resolver at `" + h + "` returned an invalid typename that could not be reconciled with the cache.", 8);
    } else {
      c = Pa(b, h, c, a);
      for (k = !1, p = !1; void 0 !== (l = c()); ) {
        m = n(l), q = aa(l, a.variables), u = l.alias ? l.alias.value : n(l), H = h + "." + (v = G(m, q)), 
        t = T(h, v), E = e ? e[m] : void 0, F = f.resolvers[b];
        if ("production" !== process.env.NODE_ENV && f.schema && b) {
          r = f.schema, y = b;
          ia.test(I = m) || oa(r, y, I);
        }
        r = void 0;
        if ("__typename" === m) {
          d[u] = b;
        } else {
          if (void 0 !== E && void 0 === l.selectionSet) {
            r = E;
          } else if (A(null !== K, "production" !== process.env.NODE_ENV ? "Invalid Cache call: The cache may only be accessed or mutated duringoperations like write or query, or as part of its resolvers, updaters, or optimistic configs." : "", 2), 
          "read" === K && F && "function" == typeof F[m]) {
            if (E = h, r = H, y = m, (v = a).parentTypeName = b, v.parentKey = E, v.parentFieldKey = r, 
            v.fieldName = y, void 0 !== t && (d[u] = t), r = F[m](d, q || {}, f, a), void 0 !== l.selectionSet && (r = $a(a, b, m, H, w(l), d[u] || {}, r)), 
            f.schema && null === r && !na(f.schema, b, m)) {
              return;
            }
          } else {
            void 0 === l.selectionSet ? r = t : void 0 !== E ? r = $a(a, b, m, H, w(l), d[u], E) : void 0 !== (q = U(h, v)) ? r = ab(a, q, b, m, w(l), d[u]) : "object" == typeof t && null !== t && (r = t);
          }
          if (void 0 === r && f.schema && na(f.schema, b, m)) {
            p = !0, d[u] = null;
          } else {
            if (void 0 === r) {
              return;
            }
            k = !0;
            d[u] = r;
          }
        }
      }
      p && (a.partial = !0);
      return g && p && !k ? void 0 : d;
    }
  }
}

function $a(a, b, c, d, e, f, g) {
  var h, l, k, p, m;
  if (Array.isArray(g)) {
    h = !(h = a.store).schema || pa(h.schema, b, c);
    for (l = Array(g.length), k = 0, p = g.length; k < p; k++) {
      if (void 0 !== (m = $a(a, b, c, d + "." + k, e, null != f ? f[k] : void 0, g[k])) || h) {
        l[k] = void 0 !== m ? m : null;
      } else {
        return;
      }
    }
    return l;
  }
  if (null == g) {
    return g;
  }
  if (null === f) {
    return null;
  }
  if ("string" == typeof g || "object" == typeof g && "string" == typeof g.__typename) {
    return b = f || {}, "string" == typeof g ? Y(a, g, e, b) : Y(a, d, e, b, g);
  }
  "production" !== process.env.NODE_ENV && B("Invalid resolver value: The field at `" + d + "` is a scalar (number, boolean, etc), but the GraphQL query expects a selection set for this field.", 9);
}

function ab(a, b, c, d, e, f) {
  var g, h, l, k, p;
  if (Array.isArray(b)) {
    g = (g = a.store).schema && pa(g.schema, c, d);
    for (h = Array(b.length), l = 0, k = b.length; l < k; l++) {
      if (void 0 !== (p = ab(a, b[l], c, d, e, null != f ? f[l] : void 0)) || g) {
        h[l] = void 0 !== p ? p : null;
      } else {
        return;
      }
    }
    return h;
  }
  return null === b || null === f ? null : Y(a, b, e, f || {});
}

function bb(a, b) {
  return makeOperation(a.kind, a, _extends({}, a.context, {
    meta: _extends({}, a.context.meta, {
      cacheOutcome: b
    })
  }));
}

function cb(a, b) {
  return makeOperation(a.kind, a, _extends({}, a.context, {
    requestPolicy: b
  }));
}

function db(a) {
  return fromArray(a[0]);
}

function eb(a, b) {
  return a.push(b), a;
}

function fb(a) {
  return "query" === a.kind && "network-only" !== a.context.requestPolicy;
}

function gb(a) {
  return "query" !== a.kind || "network-only" === a.context.requestPolicy;
}

function hb(a) {
  return "miss" !== a.outcome || "cache-only" === a.operation.context.requestPolicy;
}

function ib(a) {
  return function(b) {
    function c(a, b) {
      var wa, c = a.operation, d = a.error, f = a.extensions, g = c.key;
      if ("mutation" === c.kind) {
        h(b, S.get(g));
        S.delete(g);
      } else {
        va(y.data, c.key);
      }
      if (a.data) {
        if (h(b, g = Ra(y, c, a.data, g).dependencies), g = Xa(y, c, a.data), a.data = g.data, 
        "query" === c.kind) {
          h(b, wa = g.dependencies);
        }
      } else {
        P("read", y.data, c.key, void 0), Q();
      }
      wa && e(a.operation, wa);
      return {
        data: a.data,
        error: d,
        extensions: f,
        operation: c
      };
    }
    function d(a) {
      var b = Xa(y, a), c = b.data ? b.partial ? "partial" : "hit" : "miss";
      e(a, b.dependencies);
      return {
        outcome: c,
        operation: a,
        data: b.data,
        dependencies: b.dependencies
      };
    }
    function e(a, b) {
      for (var c in b) {
        (ja[c] || (ja[c] = [])).push(a.key), ka.set(a.key, a);
      }
    }
    function f(a) {
      var b, c, d, e, f, k, l, Z, m, I;
      if ("query" === a.kind) {
        va(y.data, a.key);
      } else if ("teardown" === a.kind) {
        ka.delete(a.key), P("read", y.data, a.key, void 0), Q();
      } else if ("mutation" === a.kind && "network-only" !== a.context.requestPolicy) {
        P("write", (b = y).data, a.key, !0);
        c = C(a.query), d = Ba();
        A((e = b.rootFields[c.operation]) === b.rootFields.mutation, "production" !== process.env.NODE_ENV ? "writeOptimistic(...) was called with an operation that is not a mutation.\nThis case is unsupported and should never occur." : "", 10);
        "production" !== process.env.NODE_ENV && z(e, c);
        Ta(b = W(b, ba(c, a.variables), D(a.query), e, e, !0), e, w(c), {});
        "production" !== process.env.NODE_ENV && x.pop();
        Q();
        a: {
          for (f in d) {
            c = !1;
            break a;
          }
          c = !0;
        }
        if (!c) {
          for (k in d) {
            la[k] = !0;
          }
          S.set(a.key, d);
          h(k = new Set, d);
          g(a, k);
        }
      }
      d = makeOperation;
      k = a.kind;
      c = a.key;
      e = formatDocument(a.query);
      if (a.variables) {
        if (f = C(a.query), (b = a.variables) && f.variableDefinitions) {
          for (l = {}, Z = 0, m = f.variableDefinitions.length; Z < m; Z++) {
            l[I = n(f.variableDefinitions[Z].variable)] = b[I];
          }
          f = l;
        } else {
          f = void 0;
        }
      } else {
        f = a.variables;
      }
      return d(k, {
        key: c,
        query: e,
        variables: f
      }, a.context);
    }
    function g(a, b) {
      b.forEach((function(b) {
        var c, d;
        if (b !== a.key) {
          if (c = ka.get(b)) {
            ka.delete(b);
            d = "cache-first";
            xa.has(b) && (xa.delete(b), d = "cache-and-network");
            F.reexecuteOperation(cb(c, d));
          }
        }
      }));
    }
    function h(a, b) {
      var c, d, e;
      if (b) {
        for (c in b) {
          if (b = ja[c]) {
            ja[c] = [];
            for (d = 0, e = b.length; d < e; d++) {
              a.add(b[d]);
            }
          }
        }
      }
    }
    function l(a) {
      for (var b in a) {
        if (la[b]) {
          return !0;
        }
      }
      return !1;
    }
    function p(a) {
      "production" !== process.env.NODE_ENV && r({
        type: "cacheMiss",
        message: "The result could not be retrieved from the cache",
        operation: a.operation,
        source: "cacheExchange"
      });
      return bb(a.operation, "miss");
    }
    function m(a) {
      return "miss" === a.outcome && "cache-only" !== a.operation.context.requestPolicy && !l(a.dependencies);
    }
    function q(a) {
      var b = a.operation, c = a.outcome, d = a.dependencies, e = {
        operation: bb(b, c),
        data: a.data,
        error: a.error,
        extensions: a.extensions
      };
      if ("cache-and-network" === b.context.requestPolicy || "cache-first" === b.context.requestPolicy && "partial" === c) {
        e.stale = !0, l(d) ? "cache-and-network" === b.context.requestPolicy && xa.add(b.key) : F.reexecuteOperation(cb(b, "network-only"));
      }
      "production" !== process.env.NODE_ENV && r({
        type: "cacheHit",
        message: "A requested operation was found and returned from the cache.",
        operation: a.operation,
        data: {
          value: e
        },
        source: "cacheExchange"
      });
      return e;
    }
    function u(a) {
      var b = new Set, d = c(a, b);
      g(a.operation, b);
      return d;
    }
    function v(a) {
      return !S.has(a.operation.key);
    }
    function H(a) {
      var b, d, e;
      if (ma.push(a) < S.size) {
        return empty;
      }
      for (b = 0; b < ma.length; b++) {
        va(y.data, ma[b].operation.key);
      }
      for (d in la) {
        delete la[d];
      }
      b = [];
      d = new Set;
      for (;e = ma.shift(); ) {
        b.push(c(e, d));
      }
      g(a.operation, d);
      return fromArray(b);
    }
    function t(a) {
      return S.has(a.operation.key);
    }
    var I, S, ma, ka, la, xa, ja, E = b.forward, F = b.client, r = b.dispatchDebug, y = new X(a);
    a && a.storage && (I = a.storage.readData().then((function k(b) {
      var e, f, g, h, c = y.data, d = a.storage;
      P("write", c, null);
      for (e in b) {
        if (void 0 !== (f = b[e])) {
          h = (g = ua(e)).entityKey;
          g = g.fieldKey;
          ":" === f[0] ? Ja(h, g, JSON.parse(f.slice(1))) : V(h, g, JSON.parse(f));
        }
      }
      Q();
      c.storage = d;
    })));
    S = new Map, ma = [], ka = new Map, la = J(), xa = new Set, ja = J();
    return function(a) {
      var b, c;
      a = share(a);
      b = I ? mergeMap(db)(take(1)(combine(scan(eb, [])(a), fromPromise(I)))) : empty;
      b = share(concat([ b, a ]));
      a = share(map(d)(filter(fb)(b)));
      b = filter(gb)(b);
      c = map(p)(filter(m)(a));
      a = map(q)(filter(hb)(a));
      c = share(E(map(f)(merge([ b, c ]))));
      b = map(u)(filter(v)(c));
      c = mergeMap(H)(filter(t)(c));
      return merge([ b, c, a ]);
    };
  };
}

function jb(a) {
  return a && a.networkError && !a.response && ("undefined" != typeof navigator && !1 === navigator.onLine || /request failed|failed to fetch|network\s?error/i.test(a.networkError.message));
}

function offlineExchange(a) {
  return function(b) {
    function e(a) {
      var b, c, d, e, f;
      if (b = "mutation" === a.operation.kind && jb(a.error)) {
        a: {
          b = H;
          d = (c = a.operation).variables || J(), e = D(c.query);
          c = [].concat(w(C(c.query)));
          for (;f = c.pop(); ) {
            if (ea(f, d)) {
              if (f.kind !== Kind.FIELD) {
                (f = f.kind === Kind.INLINE_FRAGMENT ? f : e[n(f)]) && c.push.apply(c, w(f));
              } else if (b[n(f)]) {
                b = !0;
                break a;
              }
            }
          }
          b = !1;
        }
      }
      return b ? (t.push(a.operation), E(), !1) : !0;
    }
    function h(a) {
      return "query" === a.operation.kind && jb(a.error) ? (v(cb(a.operation, "cache-only")), 
      t.push(a.operation), !1) : !0;
    }
    var p, m, q, u, v, H, t, E, F, r, y, k = a.storage;
    if (k && k.onOnline && k.readMetadata && k.writeMetadata) {
      p = b.forward, m = b.client;
      b = b.dispatchDebug;
      q = makeSubject(), u = q.source, v = q.next, H = a.optimistic || {}, t = [], E = function c() {
        var a, b, c;
        for (a = [], b = 0; b < t.length; b++) {
          "mutation" === (c = t[b]).kind && a.push({
            query: print(c.query),
            variables: c.variables
          });
        }
        k.writeMetadata(a);
      }, F = !1;
      k.onOnline(r = function d() {
        var a, b;
        if (!F) {
          F = !0;
          for (a = 0; a < t.length; a++) {
            "mutation" === (b = t[a]).kind && v(makeOperation("teardown", b));
          }
          for (a = 0; a < t.length; a++) {
            m.reexecuteOperation(t[a]);
          }
          t.length = 0;
          F = !1;
          E();
        }
      });
      k.readMetadata().then((function g(a) {
        if (a) {
          for (var b = 0; b < a.length; b++) {
            t.push(m.createRequestOperation("mutation", createRequest(a[b].query, a[b].variables)));
          }
          r();
        }
      }));
      y = ib(a)({
        client: m,
        dispatchDebug: b,
        forward: function f(a) {
          return filter(e)(p(a));
        }
      });
      return function l(a) {
        a = share(a);
        a = merge([ u, a ]);
        return filter(h)(y(a));
      };
    }
    return ib(a)(b);
  };
}

var ca, x, ia, K, L, M, N, O, Va;

import { share, mergeMap, take, combine, scan, fromPromise, empty, concat, map, filter, merge, fromArray, makeSubject } from "wonka";

import { stringifyVariables, createRequest, formatDocument, makeOperation } from "@urql/core";

import { Kind } from "graphql/language/kinds.mjs";

import { valueFromASTUntyped } from "graphql/utilities/valueFromASTUntyped.mjs";

import { print } from "graphql/language/printer.mjs";

import { _ as _extends } from "./5301ccd2.mjs";

ca = new Set, x = [];

ia = /^__/;

K = null, L = null, M = null, N = null, O = !1;

Va = /^__|PageInfo|(Connection|Edge)$/;

X.prototype.keyOfEntity = function(a) {
  var e, b = a.__typename, c = a.id, d = a._id;
  if (!b) {
    return null;
  }
  if (void 0 !== this.rootNames[b]) {
    return b;
  }
  this.keys[b] ? e = this.keys[b](a) : null != c ? e = "" + c : null != d && (e = "" + d);
  return e ? b + ":" + e : null;
};

X.prototype.resolveFieldByKey = function(a, b) {
  if (null === (a = null !== a && "string" != typeof a ? this.keyOfEntity(a) : a)) {
    return null;
  }
  var c = T(a, b);
  return void 0 !== c ? c : (b = U(a, b)) ? b : null;
};

X.prototype.resolve = function(a, b, c) {
  return this.resolveFieldByKey(a, G(b, c));
};

X.prototype.invalidate = function(a, b, c) {
  var e, d = "string" == typeof a ? a : this.keyOfEntity(a);
  A(d, "production" !== process.env.NODE_ENV ? "object" == "Can't generate a key for invalidate(...).\nYou have to pass an id or _id field or create a custom `keys` field for `" + typeof a ? a.__typename : a + "`." : "", 19);
  a = b ? [ {
    fieldKey: G(b, c)
  } ] : Na(d);
  b = 0;
  for (c = a.length; b < c; b++) {
    void 0 !== U(d, e = a[b].fieldKey) ? Ja(d, e, void 0) : V(d, e, void 0);
  }
};

X.prototype.inspectFields = function(a) {
  return null !== (a = null !== a && "string" != typeof a ? this.keyOfEntity(a) : a) ? Na(a) : [];
};

X.prototype.updateQuery = function(a, b) {
  (a = createRequest(a.query, a.variables)).query = formatDocument(a.query);
  null !== (b = b(this.readQuery(a))) && Sa(this, a, b);
};

X.prototype.readQuery = function(a) {
  (a = createRequest(a.query, a.variables)).query = formatDocument(a.query);
  return Wa(this, a).data;
};

X.prototype.readFragment = function(a, b, c) {
  var d, e;
  if (void 0 === (d = (a = D(a = formatDocument(a)))[(d = Object.keys(a))[0]])) {
    "production" !== process.env.NODE_ENV && B("readFragment(...) was called with an empty fragment.\nYou have to call it with at least one fragment in your GraphQL document.", 6), 
    c = null;
  } else {
    e = d.typeCondition.name.value;
    "string" == typeof b || b.__typename || (b.__typename = e);
    (b = "string" != typeof b ? this.keyOfEntity(_extends({}, {
      __typename: e
    }, b)) : b) ? ("production" !== process.env.NODE_ENV && z(e, d), c = Y(c = W(this, c || {}, a, e, b), b, w(d), {}) || null, 
    "production" !== process.env.NODE_ENV && x.pop()) : ("production" !== process.env.NODE_ENV && B("Can't generate a key for readFragment(...).\nYou have to pass an `id` or `_id` field or create a custom `keys` config for `" + e + "`.", 7), 
    c = null);
  }
  return c;
};

X.prototype.writeFragment = function(a, b, c) {
  var d, e, f;
  if (void 0 === (d = (a = D(a = formatDocument(a)))[(d = Object.keys(a))[0]])) {
    "production" !== process.env.NODE_ENV && B("writeFragment(...) was called with an empty fragment.\nYou have to call it with at least one fragment in your GraphQL document.", 11);
  } else {
    b = _extends({}, {
      __typename: e = d.typeCondition.name.value
    }, b);
    (f = this.keyOfEntity(b)) ? ("production" !== process.env.NODE_ENV && z(e, d), Ta(c = W(this, c || {}, a, e, f), f, w(d), b), 
    "production" !== process.env.NODE_ENV && x.pop()) : "production" !== process.env.NODE_ENV && B("Can't generate a key for writeFragment(...) data.\nYou have to pass an `id` or `_id` field or create a custom `keys` config for `" + e + "`.", 12);
  }
};

export { X as Store, ib as cacheExchange, offlineExchange, Xa as query, Ra as write };
//# sourceMappingURL=urql-exchange-graphcache.mjs.map
